@page "/tilegame"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D 

@using System.Drawing 

@using TileSolverLibrary 

@inject IJSRuntime JSRuntime

<h3>Tile Game</h3>

<div @onkeypress= "e => OnKeyPress(e)"
     tabindex="0"
     @onkeyup="e => OnKeyUp(e)"
     @ref="keyPressDiv"></div>

<BECanvas @ref="tileBoardComponent" Height="500" Width="600"></BECanvas>
<button class="btn-primary" @onclick="GenerateBoard" value="">New</button>
<button class="btn-primary" @onclick="SolveGame" value="">Solve</button>


@code {
    BECanvasComponent tileBoardComponent;
    Canvas2DContext context;

    static int[,] initialBoard = new int[,]{ { 7, 8, 0 }, { 3, 4, 5 }, { 6, 2, 1 } };
    int[,] currBoard = new int[,] { { 7, 8, 0 }, { 3, 4, 5 }, { 6, 2, 1 } };
    int[,] targetBoard = new int[,] { { 1, 4, 7 }, { 2, 5, 8 }, { 3, 6, 0 } };

    static (int col, int row) blankTileIndex = (0, 0);

    string pressedLetter = "";

    bool won = false;

    protected bool Move(int direction, bool autoGenerating = false)
    {
        if (solvingGame || won || pressedLetter != "") return false;
        //1: up, 2: down, 3: left, 4: right

        (int col, int row) tileToSwap = (-1, -1);

        bool validMove = false;

        switch(direction)
        {
            case 1:
                if(blankTileIndex.row < 2)
                {
                    tileToSwap = (blankTileIndex.col, blankTileIndex.row + 1);
                    if(!autoGenerating) pressedLetter = "w";
                    validMove = true;
                }
                break;
            case 2:
                if (blankTileIndex.row > 0)
                {
                    tileToSwap = (blankTileIndex.col, blankTileIndex.row - 1);
                    if (!autoGenerating) pressedLetter = "s";
                    validMove = true;
                }
                break;
            case 3:
                if (blankTileIndex.col < 2)
                {
                    tileToSwap = (blankTileIndex.col + 1, blankTileIndex.row);
                    if (!autoGenerating) pressedLetter = "a";
                    validMove = true;
                }
                break;
            case 4:
                if (blankTileIndex.col > 0)
                {
                    tileToSwap = (blankTileIndex.col - 1, blankTileIndex.row);
                    if (!autoGenerating) pressedLetter = "d";
                    validMove = true;
                }
                break;
        }
        if (!validMove) return false;
        var temp = currBoard[tileToSwap.col, tileToSwap.row];
        currBoard[tileToSwap.col, tileToSwap.row] = 0;
        currBoard[blankTileIndex.col, blankTileIndex.row] = temp;

        blankTileIndex = tileToSwap;

        Vertex curr = new Vertex(currBoard);
        Vertex target = new Vertex(targetBoard);

        if (!autoGenerating && curr.GetHashCode() == target.GetHashCode())
        {
            won = true;
        }

        if(!autoGenerating) this.StateHasChanged();
        return true;
    }

    protected void OnKeyPress(KeyboardEventArgs e)
    {
        var letter = e.Key;

        switch(letter)
        {
            case "w":
                Move(1);
                break;
            case "a":
                Move(3);
                break;
            case "s":
                Move(2);
                break;
            case "d":
                Move(4);
                break;
        }
    }
    protected void OnKeyUp(KeyboardEventArgs e)
    {
        if(e.Key == pressedLetter)
        {
            pressedLetter = "";
        }
    }

    static int EvaluateScore(Vertex vertex)
    {
        var board = vertex.Value;
        int sum = 0;
        for (int i = 0; i < 9; i++)
        {
            var currCol = i % 3;
            var currRow = (int)(Math.Truncate((double)(i / 3)));

            if (board[currCol, currRow] == 0) continue;

            var targetCol = (board[currCol, currRow] - 1) % 3;
            var targetRow = (int)(Math.Truncate((double)((board[currCol, currRow] - 1) / 3)));
            sum += Math.Abs(currCol - targetCol) + Math.Abs(currRow - targetRow);
        }
        return sum;
    }

    Graph graph = new Graph(3, EvaluateScore, new Vertex(initialBoard));

    static Stack<int[,]> boardStates = new Stack<int[,]>();

    bool changedBoardState = false;
    bool solvingGame = false;

    ElementReference keyPressDiv;

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            context = await tileBoardComponent.CreateCanvas2DAsync();
            checkBoardStates();
        }
        await JSRuntime.InvokeVoidAsync("SetFocusToElement", keyPressDiv);

        if (context == null) return;

        await context.BeginBatchAsync();
        await context.SetFillStyleAsync("gray");
        await context.FillRectAsync(0, 0, 390, 390);

        int x = 0;
        int y = 0;

        for (int i = 0; i < 9; i++)
        {
            var column = i % 3;
            var row = (int)(Math.Truncate((double)(i / 3)));
            x = 20 + 120 * column;
            y = 20 + 120 * row;
            if (currBoard[column, row] == 0)
            {
                blankTileIndex = (column, row);
                continue;
            }
            await context.SetFillStyleAsync("blue");
            await context.FillRectAsync(x, y, 110, 110);
            await context.SetFillStyleAsync("white");
            await context.SetFontAsync("40pt Calibri");
            await context.FillTextAsync($"{currBoard[column, row]}", x + 40, y + 70);
        }

        changedBoardState = false;

        await context.EndBatchAsync();

        if (won)
        {
            await JSRuntime.InvokeVoidAsync("WinAlert");
        }
    }


    private void SolveGame()
    {

        var finalBoardState = graph.AStar(new Vertex(targetBoard));

        var curr = finalBoardState;

        while(curr.Value != graph.Start.Value)
        {
            boardStates.Push(curr.Value);
            curr = curr.Founder;
        }
        solvingGame = true;
    }

    private void GenerateBoard()
    {
        if (solvingGame) return;
        Array.Copy(targetBoard, currBoard, targetBoard.Length);

        Random random = new Random();

        var numOfMoves = random.Next(20, 30);
        blankTileIndex = (2, 2);

        for(int i = 0; i < numOfMoves; i++)
        {
            int currMove = random.Next(1, 5);
            if (!Move(currMove, true)) i--;
        }
        won = false;
        graph = new Graph(3, EvaluateScore, new Vertex(currBoard));
        this.StateHasChanged();
    }

    protected async void checkBoardStates()
    {
        while (true)
        {
            solvingGame = false;
            if (boardStates.Count != 0 && !changedBoardState)
            {
                solvingGame = true;
                currBoard = boardStates.Pop();
                changedBoardState = true;
                await Task.Delay(250);
                this.StateHasChanged();
            }
            await Task.Yield();
        }
    }

    protected override bool ShouldRender()
    {
        return true;
    }
}
