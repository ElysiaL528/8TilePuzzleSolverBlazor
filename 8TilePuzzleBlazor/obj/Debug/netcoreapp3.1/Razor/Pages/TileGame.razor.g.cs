#pragma checksum "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bc9c7a62ef59fc5c2474f7075b78881c85d021cd"
// <auto-generated/>
#pragma warning disable 1591
namespace _8TilePuzzleBlazor.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using _8TilePuzzleBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\_Imports.razor"
using _8TilePuzzleBlazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
using Blazor.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
using Blazor.Extensions.Canvas;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
using Blazor.Extensions.Canvas.Canvas2D;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
using TileSolverLibrary;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/tilegame")]
    public partial class TileGame : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h3>Tile Game</h3>\r\n\r\n");
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "onkeypress", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(this, 
#nullable restore
#line 15 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
                   e => OnKeyPress(e)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(3, "tabindex", "0");
            __builder.AddAttribute(4, "onkeyup", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(this, 
#nullable restore
#line 17 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
               e => OnKeyUp(e)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddElementReferenceCapture(5, (__value) => {
#nullable restore
#line 18 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
           keyPressDiv = __value;

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(6, "\r\n\r\n");
            __builder.OpenComponent<Blazor.Extensions.Canvas.BECanvas>(7);
            __builder.AddAttribute(8, "Height", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Int64>(
#nullable restore
#line 20 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
                                            500

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(9, "Width", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Int64>(
#nullable restore
#line 20 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
                                                        600

#line default
#line hidden
#nullable disable
            ));
            __builder.AddComponentReferenceCapture(10, (__value) => {
#nullable restore
#line 20 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
                tileBoardComponent = (Blazor.Extensions.Canvas.BECanvas)__value;

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseComponent();
            __builder.AddMarkupContent(11, "\r\n");
            __builder.OpenElement(12, "button");
            __builder.AddAttribute(13, "class", "btn-primary");
            __builder.AddAttribute(14, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 21 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
                                      GenerateBoard

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(15, "value", "");
            __builder.AddContent(16, "New");
            __builder.CloseElement();
            __builder.AddMarkupContent(17, "\r\n");
            __builder.OpenElement(18, "button");
            __builder.AddAttribute(19, "class", "btn-primary");
            __builder.AddAttribute(20, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 22 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
                                      SolveGame

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(21, "value", "");
            __builder.AddContent(22, "Solve");
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 25 "C:\Users\Elysia Lopez\Documents\Visual Studio 2019\Projects\8TilePuzzleBlazor\8TilePuzzleBlazor\Pages\TileGame.razor"
       
    BECanvasComponent tileBoardComponent;
    Canvas2DContext context;

    static int[,] initialBoard = new int[,]{ { 7, 8, 0 }, { 3, 4, 5 }, { 6, 2, 1 } };
    int[,] currBoard = new int[,] { { 7, 8, 0 }, { 3, 4, 5 }, { 6, 2, 1 } };
    int[,] targetBoard = new int[,] { { 1, 4, 7 }, { 2, 5, 8 }, { 3, 6, 0 } };

    static (int col, int row) blankTileIndex = (0, 0);

    string pressedLetter = "";

    bool won = false;

    protected bool Move(int direction, bool autoGenerating = false)
    {
        if (solvingGame || won || pressedLetter != "") return false;
        //1: up, 2: down, 3: left, 4: right

        (int col, int row) tileToSwap = (-1, -1);

        bool validMove = false;

        switch(direction)
        {
            case 1:
                if(blankTileIndex.row < 2)
                {
                    tileToSwap = (blankTileIndex.col, blankTileIndex.row + 1);
                    if(!autoGenerating) pressedLetter = "w";
                    validMove = true;
                }
                break;
            case 2:
                if (blankTileIndex.row > 0)
                {
                    tileToSwap = (blankTileIndex.col, blankTileIndex.row - 1);
                    if (!autoGenerating) pressedLetter = "s";
                    validMove = true;
                }
                break;
            case 3:
                if (blankTileIndex.col < 2)
                {
                    tileToSwap = (blankTileIndex.col + 1, blankTileIndex.row);
                    if (!autoGenerating) pressedLetter = "a";
                    validMove = true;
                }
                break;
            case 4:
                if (blankTileIndex.col > 0)
                {
                    tileToSwap = (blankTileIndex.col - 1, blankTileIndex.row);
                    if (!autoGenerating) pressedLetter = "d";
                    validMove = true;
                }
                break;
        }
        if (!validMove) return false;
        var temp = currBoard[tileToSwap.col, tileToSwap.row];
        currBoard[tileToSwap.col, tileToSwap.row] = 0;
        currBoard[blankTileIndex.col, blankTileIndex.row] = temp;

        blankTileIndex = tileToSwap;

        Vertex curr = new Vertex(currBoard);
        Vertex target = new Vertex(targetBoard);

        if (!autoGenerating && curr.GetHashCode() == target.GetHashCode())
        {
            won = true;
        }

        if(!autoGenerating) this.StateHasChanged();
        return true;
    }

    protected void OnKeyPress(KeyboardEventArgs e)
    {
        var letter = e.Key;

        switch(letter)
        {
            case "w":
                Move(1);
                break;
            case "a":
                Move(3);
                break;
            case "s":
                Move(2);
                break;
            case "d":
                Move(4);
                break;
        }
    }
    protected void OnKeyUp(KeyboardEventArgs e)
    {
        if(e.Key == pressedLetter)
        {
            pressedLetter = "";
        }
    }

    static int EvaluateScore(Vertex vertex)
    {
        var board = vertex.Value;
        int sum = 0;
        for (int i = 0; i < 9; i++)
        {
            var currCol = i % 3;
            var currRow = (int)(Math.Truncate((double)(i / 3)));

            if (board[currCol, currRow] == 0) continue;

            var targetCol = (board[currCol, currRow] - 1) % 3;
            var targetRow = (int)(Math.Truncate((double)((board[currCol, currRow] - 1) / 3)));
            sum += Math.Abs(currCol - targetCol) + Math.Abs(currRow - targetRow);
        }
        return sum;
    }

    Graph graph = new Graph(3, EvaluateScore, new Vertex(initialBoard));

    static Stack<int[,]> boardStates = new Stack<int[,]>();

    bool changedBoardState = false;
    bool solvingGame = false;

    ElementReference keyPressDiv;

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            context = await tileBoardComponent.CreateCanvas2DAsync();
            checkBoardStates();
        }
        await JSRuntime.InvokeVoidAsync("SetFocusToElement", keyPressDiv);

        if (context == null) return;

        await context.BeginBatchAsync();
        await context.SetFillStyleAsync("gray");
        await context.FillRectAsync(0, 0, 390, 390);

        int x = 0;
        int y = 0;

        for (int i = 0; i < 9; i++)
        {
            var column = i % 3;
            var row = (int)(Math.Truncate((double)(i / 3)));
            x = 20 + 120 * column;
            y = 20 + 120 * row;
            if (currBoard[column, row] == 0)
            {
                blankTileIndex = (column, row);
                continue;
            }
            await context.SetFillStyleAsync("blue");
            await context.FillRectAsync(x, y, 110, 110);
            await context.SetFillStyleAsync("white");
            await context.SetFontAsync("40pt Calibri");
            await context.FillTextAsync($"{currBoard[column, row]}", x + 40, y + 70);
        }

        changedBoardState = false;

        await context.EndBatchAsync();

        if (won)
        {
            await JSRuntime.InvokeVoidAsync("WinAlert");
        }
    }


    private void SolveGame()
    {

        var finalBoardState = graph.AStar(new Vertex(targetBoard));

        var curr = finalBoardState;

        while(curr.Value != graph.Start.Value)
        {
            boardStates.Push(curr.Value);
            curr = curr.Founder;
        }
        solvingGame = true;
    }

    private void GenerateBoard()
    {
        if (solvingGame) return;
        Array.Copy(targetBoard, currBoard, targetBoard.Length);

        Random random = new Random();

        var numOfMoves = random.Next(20, 30);
        blankTileIndex = (2, 2);

        for(int i = 0; i < numOfMoves; i++)
        {
            int currMove = random.Next(1, 5);
            if (!Move(currMove, true)) i--;
        }
        won = false;
        graph = new Graph(3, EvaluateScore, new Vertex(currBoard));
        this.StateHasChanged();
    }

    protected async void checkBoardStates()
    {
        while (true)
        {
            solvingGame = false;
            if (boardStates.Count != 0 && !changedBoardState)
            {
                solvingGame = true;
                currBoard = boardStates.Pop();
                changedBoardState = true;
                await Task.Delay(250);
                this.StateHasChanged();
            }
            await Task.Yield();
        }
    }

    protected override bool ShouldRender()
    {
        return true;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
